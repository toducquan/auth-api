swagger: "2.0"

tags:
- name: "Todo"
  description: "your todolist"
- name: "Auth"
  description: "Login and register"
paths:
  /api/todo:
    get:
      tags:
      - "Todo"
      summary: "get all work"
      description: "Returns a map of status codes to quantities"
      operationId: "get Todolist"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
        - bearerAuth: []
    post:
      tags:
      - "Todo"
      summary: "Add a new work to the todolist"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/Todo"
      responses:
        "405":
          description: "Invalid input"
      security:
        - bearerAuth: []
  /api/todo/{id}:
    get:
      tags:
      - "Todo"
      summary: "Get work by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "work id"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid ID"
        "404":
          description: "ID not found"
        "405":
          description: "Validation exception"
      security:
        - bearerAuth: []
    put:
      tags:
      - "Todo"
      summary: "update my work"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "work id"
        required: true
        type: "string"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                is_completed:
                  type: "boolean"
                  example: true
      responses:
        "400":
          description: "Invalid ID"
        "404":
          description: "ID not found"
        "405":
          description: "Validation exception"
      security:
        - bearerAuth: []
    delete:
      tags:
      - "Todo"
      summary: "Delete work by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "work id"
        required: true
        type: "string"
      responses:
        "200":
          description: "Delete successfully"
      security:
        - bearerAuth: []
  /register:
    post:
      tags:
      - "Auth"
      summary: "Add a new User"
      description: "Add a new User"
      # consumes:
      # - "application/json"
      produces:
      - "application/json"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/User"
      responses:
        "405":
          description: "Invalid input"
  /login:
    post:
      tags:
      - "Auth"
      summary: "login to an existing user"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: "quan.to@tda.company"
                password:
                  type: string
                  example: "quanto"
      responses:
        "405":
          description: "Invalid input"
    

definitions:
  User:
    type: "object"
    properties:
      email:
        type: "string"
        example: "quan.to@tda.company"
      password:
        type: "string"
        example: "quanto"
      password_confirmation:
        type: "string"
        example: "quanto"
  Todo:
    type: "object"
    properties:
      title:
        type: "string"
        example: "play LOL"

components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    